from aiogram import types, Dispatcher
from tools.db_dispatcher import DataBaseDispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.user_keyboards import main_information, account_actions
import json

class LoginUser(StatesGroup):
    user_email = State()
    user_password = State()

db_dispatcher = DataBaseDispatcher()

async def start_bot(message: types.Message):
    service = "Some URL"
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç ‚úå!\nEcolStudyBot - –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {service}!")


async def close_state(messsage: types.Message, state: FSMContext):
    await messsage.answer("–î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    await state.finish()

# functions for login user
async def login_user_start(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã")
    await LoginUser.user_email.set()

async def login_email(message: types.Message, state: FSMContext):
    await state.update_data(user_email=message.text)
    await LoginUser.next()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞")

async def login_password(message: types.Message, state: FSMContext):
    await state.update_data(user_password=message.text)
    user_data = await state.get_data()
    result = db_dispatcher.login_user(message.from_user.id, **user_data)
    match result:
        case {"success":"user was updated"}:
            await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        case {"success":"user was added"}:
            await message.answer("–ê–∫–∫–∞—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        case {"failed": "not found"}:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        case _:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ :(")
    
    await state.finish()


# functions for action with account


buttons_texts = {
    "concepts": {
        "text": "*üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –≤–æ–¥—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ ‚ùï*\n\n–ü–µ—Ä–≤—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å—Ç–∞–ª Electrovan –æ—Ç General Motors 1966 –≥–æ–¥–∞. –û–Ω –±—ã–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞–º–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –º–æ–≥ –ø—Ä–æ–µ—Ö–∞—Ç—å –¥–æ 193 –∫–º –Ω–∞ –æ–¥–Ω–æ–º –∑–∞—Ä—è–¥–µ.\n\n–û–¥–Ω–∞–∫–æ —ç—Ç–æ –±—ã–ª –µ–¥–∏–Ω–∏—á–Ω—ã–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–≤–∏–≥–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞–≤–æ–¥–∞.–í 1979-–º –ø–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å BMW —Å –≤–æ–¥–æ—Ä–æ–¥–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º. –¢–æ–ª—á–∫–æ–º –∫ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å–ª—É–∂–∏–ª–∏ –Ω–µ—Ñ—Ç—è–Ω—ã–µ –∫—Ä–∏–∑–∏—Å—ã 1970-—Ö, –∏ –ø–æ –∏—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–± –∏–¥–µ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –∑–∞–±—ã–ª–∏ –≤–ø–ª–æ—Ç—å –¥–æ 2000-—Ö –≥–æ–¥–æ–≤.\n\n–í 2007 –≥–æ–¥—É —Ç–∞ –∂–µ BMW –≤—ã–ø—É—Å—Ç–∏–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π Hydrogen 7, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–∞ –±–µ–Ω–∑–∏–Ω–µ, —Ç–∞–∫ –∏ –Ω–∞ –≤–æ–¥–æ—Ä–æ–¥–µ. –ù–æ –º–∞—à–∏–Ω–∞ –±—ã–ª–∞ –Ω–µ–¥–µ—à–µ–≤–æ–π, –ø—Ä–∏ —ç—Ç–æ–º 8-–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤–æ–≥–æ –±–∞–ª–ª–æ–Ω–∞ —Å –≥–∞–∑–æ–º —Ö–≤–∞—Ç–∞–ª–æ –≤—Å–µ–≥–æ –Ω–∞ 200-250 –∫–º.–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –†–ë–ö",
        "links": ["https://trends.rbc.ru/trends/industry/6048e0629a794750974c67a7",
            "https://www.popularmechanics.com/cars/a3428/4271579/",
            "https://www.unilad.co.uk/life/inventor-of-water-powered-car-died-screaming-they-poisoned-me"
        ]
    },
    "nature": {"text":"*–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –≤ –º–∏—Ä–µ*üåè\n\n–ü–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º –æ—Ü–µ–Ω–∫–∞–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏ –Ω–∞ _40‚Äì50%_ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è–º–∏ –∏ –¥—Ä. –≤–ª–∏—è–Ω–∏—è–º–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–µ—Ç, –Ω–æ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è–º–∏, –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, —Ö–∏–º–∏–∑–∞—Ü–∏–µ–π —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, _—ç–∫—Å—Ç–µ–Ω—Å–∏–≤–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤_, —á–µ—Ä–Ω–æ–±—ã–ª—å—Å–∫–æ–π –∏ –¥—Ä. –∞–≤–∞—Ä–∏—è–º–∏ –∏ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞–º–∏ –≤ –°–°–°–†, –∞ —Ç–∞–∫–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ä–µ–¥—ã –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç–µ.", 
    "links":["https://meteoinfo.ru/novosti/99-pogoda-v-mire", 
    "https://www.nkj.ru/archive/articles/10376/", 
    "https://bigenc.ru/geography/text/5575813"]},
    "opinions":{"text":"–ë—É–¥—É—â–µ–µ –±—É–¥–µ—Ç –≤ –∫–æ—Ä–Ω–µ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ\n\n_'–ü–æ—Å–∫–æ–ª—å–∫—É 84% –Ω–∞—à–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ—Å—Ç—É–ø–∞–µ—Ç –∏–∑ –Ω–µ—Ñ—Ç–∏, —É–≥–ª—è –∏ –≥–∞–∑–∞, –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –µ—â–µ –≤–ø–µ—Ä–µ–¥–∏. –¢–æ, —á—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç –¥—Ä—É–≥–æ–µ –±—É–¥—É—â–µ–µ, –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ—Å—Ç–æ —É–π–¥–µ—Ç —Å–æ —Å—Ü–µ–Ω—ã. –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ –º–µ–Ω—è—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–µ. –¢–∞–∫–∂–µ, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –±—É–¥–µ—Ç –¥–æ–ª–≥–∏–º, –æ–Ω –Ω–µ –ø–æ–ª–æ–∂–∏—Ç –∫–æ–Ω–µ—Ü –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞.' - –•–µ–ª–µ–Ω –¢–æ–º–ø—Å–æ–Ω_\n\n_–î–∞, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞ –±—É–¥—É—Ç –∏–º–µ—Ç—å —Ä–µ—à–∞—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ–∑—É–≥–ª–µ—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ù–æ –¥–∞–≤–∞–π—Ç–µ –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–±—É–¥—É—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 1,5 ¬∞C –≤—ã—à–µ –¥–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ü–æ–ª–∏—Ç–∏–∫–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–∂–µ –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–≤—à–∏–º–∏ —Å–µ–±—è –º–µ—Ç–æ–¥–∞–º–∏ ‚Äî –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é —Å–ø–æ—Å–æ–±–∞–º–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏._ - –ú–∞—Ä–∏ –ö–ª—ç—Ä –ë—Ä–∏—Å–±—É–∞", 
    "links":["https://www.nature.com/articles/d41586-022-00713-3", 
    "https://www.nature.com/articles/d41586-022-00560-2"]}
}

async def user_information(message: types.Message):
    await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ...", reply_markup=main_information)


async def user_concepts_kb(callback: types.CallbackQuery):
    bot = callback.bot
    await bot.answer_callback_query(callback.id)
    text = buttons_texts["concepts"]
    links = '\n'.join(text['links'])
    text = f"{text['text']}\n\n–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å:\n\n{links}"
    await bot.send_message(chat_id=callback.message.chat.id, text=text, parse_mode=types.ParseMode.MARKDOWN)

async def user_nature_kb(callback:types.CallbackQuery):
    bot = callback.bot
    await bot.answer_callback_query(callback.id)
    text = buttons_texts["nature"]
    links = "\n".join(text["links"])
    text = f"{text['text']}\n\n–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å:\n\n{links}"
    await bot.send_message(chat_id=callback.message.chat.id, text=text, parse_mode=types.ParseMode.MARKDOWN)

async def user_opinions_kb(callback: types.CallbackQuery):
    bot = callback.bot
    await bot.answer_callback_query(callback.id)
    text = buttons_texts["opinions"]
    links = text["links"]
    text = f"{text['text']}\n\n–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å:\n\n{links}"
    await bot.send_message(chat_id=callback.message.chat.id, text=text, parse_mode=types.ParseMode.MARKDOWN)

# user functions to account actions

async def show_user_account_actions(message: types.Message):
    result = db_dispatcher.check_bot_user(message.from_user.id)
    match result:
        case {
            "Name":name,
            "description": description,
            "data_registration":data_register}:
            pass
        case _:
            await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
            return
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=account_actions)


async def user_account_statistic(callback: types.CallbackQuery):
    bot = callback.bot
    await bot.answer_callback_query(callback.id)
    info = db_dispatcher.get_user_info(callback.from_user.id)

    text_info = f"Your nickname: {info['Name']}\nDescription profile: {info['description']}\nData registration: {info['data_registration']} "
    await bot.send_message(chat_id=callback.message.chat.id, text=text_info)

async def account_sign_out(callback: types.CallbackQuery):
    bot = callback.bot
    await bot.answer_callback_query(callback.id)
    result = db_dispatcher.delete_bot_user(callback.from_user.id)
    match result:
        case  {'success': 'OK'}:
            await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        case _:
            await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=["start"])
    dp.register_message_handler(close_state, commands="close_process", state="*")

    # login handlers
    dp.register_message_handler(login_user_start, commands="login", state="*")
    dp.register_message_handler(login_email, state=LoginUser.user_email)
    dp.register_message_handler(login_password, state=LoginUser.user_password)

    # regsiter callback handlers on kb main_informations
    dp.register_message_handler(user_information, commands=["get_info"])
    dp.register_callback_query_handler(user_concepts_kb, text="concepts")
    dp.register_callback_query_handler(user_nature_kb, text="nature")
    dp.register_callback_query_handler(user_opinions_kb, text="opinions")

    # register account actions
    dp.register_message_handler(show_user_account_actions, commands=["account_actions"])
    dp.register_callback_query_handler(user_account_statistic, text="statistic")
    dp.register_callback_query_handler(account_sign_out, text="sign_out")
